{"version":3,"sources":["engine/redux/snake/services/SequenceGenerator.ts","engine/redux/snake/models/Cell.ts","engine/redux/snake/models/Board.ts","engine/redux/snake/services/BoardFactory.ts","engine/redux/snake/game/actions.ts","engine/redux/snake/reducers/gameReducer.ts","engine/redux/snake/reducers/rootReducer.ts","components/GameBoard.tsx","components/DebugStateMessage.tsx","components/GameConfigDialog.tsx","components/GameConfigField.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RandomIntegerSequenceGenerator","_ref","random","Object","classCallCheck","this","createClass","key","value","_ref2","_this","start","end","length","_ref2$skip","skip","candidates","_","range","filter","candidate","shouldKeepCandidate","validateCandidates","map","getNextRandomNumberFrom","splice","getRandomInt","min","max","Math","ceil","floor","_ref3","maxLength","Error","concat","_ref4","indexOf","DEFAULT","Cells","freeze","MINE","isMine","EMPTY","DEFAULT_BOARD","newEmptyBoard","w","h","numBomb","cells","meta","newBoard","_ref3$bombsIndices","bombsIndices","r","c","flattenIndex","RandomBoardFactory","sequenceGenerator","generate","updateConfig","createStandardAction","payload","field","newValue","createEmptyBoard","config","startGame","_ref3$boardFactory","boardFactory","board","createBoard","EMPTY_STATE","isDialogOpen","gameReducer","createReducer","handleAction","state","produce","draft","rootReducer","combineReducers","game","GameBoard","withStyles","palette","spacing","createStyles","root","display","flexDirection","padding","backgroundColor","background","default","color","primary","main","gameBoardContainer","justifyContent","height","marginTop","gameBoardCell","width","margin","gameState","classes","row","rowIndex","react_default","a","createElement","cell","columnIndex","Button","variant","className","Paper","DebugStateMessage","GameConfigField","id","label","_ref$range","dispatch","TextField","autoFocus","fullWidth","type","InputProps","inputProps","onChange","event","parseInt","target","Number","isInteger","BOARD_SIZE_RANGE","GameConfigDialog","isConfigDialogOpen","useDispatch","MAX_BOMB_PERCENTAGE","Dialog","open","aria-labelledby","DialogTitle","DialogContent","DialogContentText","round","DialogActions","onClick","App","useSelector","components_GameConfigField","components_GameBoard","components_DebugStateMessage","Boolean","window","location","hostname","match","store","configureStore","reducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dedee412.chunk.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport interface SequenceGenerator<T> {\r\n    generate(config: { start: number, end: number, length: number }): Array<T>\r\n}\r\n\r\nexport class RandomIntegerSequenceGenerator implements SequenceGenerator<number> {\r\n    public static readonly DEFAULT: RandomIntegerSequenceGenerator = new RandomIntegerSequenceGenerator({\r\n        random: Math.random\r\n    });\r\n\r\n    private readonly random: () => number;\r\n\r\n    constructor({random}: { random: () => number }) {\r\n        this.random = random;\r\n    }\r\n\r\n    generate({start, end, length, skip = []}: { start: number; end: number; length: number, skip?: Array<number> }): Array<number> {\r\n        const candidates = _.range(start, end)\r\n            .filter(candidate => RandomIntegerSequenceGenerator.shouldKeepCandidate({candidate, skip}));\r\n\r\n        RandomIntegerSequenceGenerator.validateCandidates({candidates, length,});\r\n\r\n        return _.range(0, length).map(() => this.getNextRandomNumberFrom(candidates));\r\n    }\r\n\r\n    private getNextRandomNumberFrom(candidates: Array<number>) {\r\n        return candidates.splice(this.getRandomInt(0, candidates.length), 1)[0];\r\n    }\r\n\r\n    // reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values\r\n    private getRandomInt(min: number, max: number) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(this.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n    }\r\n\r\n    private static validateCandidates({candidates, length,}: { candidates: Array<number>; length: number }) {\r\n        const maxLength = candidates.length;\r\n        if (length > maxLength) {\r\n            throw new Error(`Invalid length, expected at most <${maxLength}> but got <${length}>`);\r\n        }\r\n    }\r\n\r\n    private static shouldKeepCandidate({candidate, skip}: { candidate: number; skip: Array<number> }): boolean {\r\n        return skip.indexOf(candidate) === -1;\r\n    }\r\n}\r\n","export type Cell = Readonly<{\r\n    isMine: boolean,\r\n    isRevealed?: boolean,\r\n    numNeighbourMine?: number,\r\n}>;\r\n\r\nexport const Cells: { [celltype: string]: Cell } = Object.freeze({\r\n    MINE: ({isMine: true}),\r\n    EMPTY: ({isMine: false})\r\n});","import _ from \"lodash\";\r\n\r\nimport {Cell, Cells} from \"./Cell\";\r\n\r\nexport type Board = Readonly<{\r\n    cells: Cell[][],\r\n    meta: Readonly<{\r\n        \"numBomb\": number,\r\n    }>\r\n}>\r\n\r\nexport const DEFAULT_BOARD: Board = Object.freeze(newEmptyBoard({w: 8, h: 8, numBomb: 6}));\r\n\r\nexport function newBoardFromCells({cells}: { cells: Cell[][] }): Board {\r\n    return {\r\n        cells,\r\n        meta: {\r\n            numBomb: 0\r\n        }\r\n    };\r\n}\r\n\r\nexport function newEmptyBoard({w, h, numBomb}: { w: number, h: number, numBomb: number }): Board {\r\n    return {\r\n        cells: _.range(0, h).map(() => _.range(0, w).map(() => Cells.EMPTY)),\r\n        meta: {numBomb}\r\n    };\r\n}\r\n\r\nexport function newBoard({w, h, bombsIndices = []}: { w: number, h: number, bombsIndices?: Array<number> }): Board {\r\n    const cells = _.range(0, h).map(r =>\r\n        _.range(0, w).map(c =>\r\n            isMine(r, c) ? Cells.MINE : Cells.EMPTY\r\n        )\r\n    );\r\n\r\n    function isMine(r: number, c: number) {\r\n        const flattenIndex: number = r * w + c;\r\n        return bombsIndices.indexOf(flattenIndex) !== -1\r\n    }\r\n\r\n    return {\r\n        cells,\r\n        meta: {\r\n            numBomb: bombsIndices.length\r\n        }\r\n    };\r\n}","import {GameConfig} from \"../models/state\";\r\nimport {RandomIntegerSequenceGenerator, SequenceGenerator} from \"./SequenceGenerator\";\r\nimport {Board, newBoard} from \"../models/Board\";\r\n\r\nexport interface BoardFactory {\r\n    createBoard(config: GameConfig): Board\r\n}\r\n\r\nexport class RandomBoardFactory implements BoardFactory {\r\n    public static readonly DEFAULT: RandomBoardFactory = new RandomBoardFactory({\r\n        sequenceGenerator: RandomIntegerSequenceGenerator.DEFAULT\r\n    });\r\n\r\n    private readonly sequenceGenerator: SequenceGenerator<number>;\r\n\r\n    constructor({sequenceGenerator}: { sequenceGenerator: SequenceGenerator<number> }) {\r\n        this.sequenceGenerator = sequenceGenerator;\r\n    }\r\n\r\n    createBoard({w, h, numBomb}: GameConfig): Board {\r\n        const bombsIndices = this.sequenceGenerator.generate({start: 0, end: h * w, length: numBomb});\r\n\r\n        return newBoard({w, h, bombsIndices});\r\n    }\r\n}","import {createStandardAction} from 'typesafe-actions';\r\n\r\nimport {GameConfig} from \"../models/state\";\r\nimport {BoardFactory, RandomBoardFactory} from \"../services/BoardFactory\";\r\n\r\nexport type UpdatedConfig = {\r\n    field: keyof GameConfig,\r\n    newValue: GameConfig[UpdatedConfig['field']]\r\n};\r\n\r\nexport const updateConfig = createStandardAction('UPDATE_CONFIG')\r\n    .map(({field, newValue}: UpdatedConfig) =>\r\n        ({payload: {field, newValue}})\r\n    );\r\n\r\nexport const createEmptyBoard = createStandardAction('CREATE_EMPTY_BOARD')\r\n    .map(({config}: { config: GameConfig, }) =>\r\n        ({payload: {config}})\r\n    );\r\n\r\nexport const startGame = createStandardAction('START_GAME')\r\n    .map(({config, boardFactory = RandomBoardFactory.DEFAULT}: { config: GameConfig, boardFactory?: BoardFactory }) =>\r\n        ({payload: {board: boardFactory.createBoard(config), config}})\r\n    );\r\n","import produce from \"immer\";\r\nimport {createReducer} from 'typesafe-actions';\r\n\r\nimport {GameState} from \"../models/state\";\r\nimport {createEmptyBoard, startGame, updateConfig} from \"../game/actions\";\r\nimport {newBoard, DEFAULT_BOARD, newEmptyBoard} from \"../models/Board\";\r\n\r\nconst EMPTY_STATE: GameState = {\r\n    config: {\r\n        h: 8,\r\n        w: 8,\r\n        numBomb: 6\r\n    },\r\n    board: DEFAULT_BOARD,\r\n    meta: {\r\n        isDialogOpen: true,\r\n    }\r\n};\r\n\r\nexport const gameReducer = createReducer(EMPTY_STATE as GameState)\r\n    .handleAction(updateConfig, (state, {payload}) =>\r\n        produce(state, draft => {\r\n            draft.config[payload.field] = payload.newValue;\r\n        })\r\n    )\r\n    .handleAction(createEmptyBoard, (state, {payload}) =>\r\n        produce(state, draft => {\r\n            draft.board = newBoard({h: payload.config.h, w: payload.config.w,});\r\n            // todo: utilize payload.config.numBomb;\r\n        })\r\n    )\r\n    .handleAction(startGame, (state, {payload: {config}}) =>\r\n        produce(state, draft => {\r\n            draft.meta.isDialogOpen = false;\r\n            draft.board = newEmptyBoard(config)\r\n        })\r\n    );\r\n","import {combineReducers} from \"redux\";\r\n\r\nimport {gameReducer} from \"./gameReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    game: gameReducer\r\n});","import React from \"react\";\r\nimport {createStyles, Paper, Theme, withStyles, WithStyles} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {GameState} from \"../engine/redux/snake/models/state\";\r\n\r\nconst styles = ({palette, spacing}: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: spacing(), // TODO: investigate\r\n        backgroundColor: palette.background.default,\r\n        color: palette.primary.main,\r\n    },\r\n    gameBoardContainer: {\"display\": \"flex\", \"justifyContent\": \"center\", \"height\": \"100%\", marginTop: spacing(16)},\r\n    gameBoardCell: {\"width\": \"64px\", \"height\": \"64px\", margin: spacing(0.5)}\r\n});\r\n\r\ninterface GameBoardProps extends WithStyles<typeof styles> {\r\n    gameState: GameState,\r\n}\r\n\r\nconst GameBoard = withStyles(styles)(({gameState, classes}: GameBoardProps) => {\r\n    const cells = gameState.board.cells.map((row, rowIndex) => (\r\n        <tr key={`board-row-${rowIndex}`}>\r\n            {\r\n                row.map((cell, columnIndex) => (\r\n                        <td key={`board-column-${columnIndex}`}>\r\n                            <div>\r\n                                <Button variant=\"contained\" className={classes.gameBoardCell}>\r\n                                </Button>\r\n                            </div>\r\n                        </td>\r\n                    )\r\n                )\r\n            }\r\n        </tr>\r\n    ));\r\n\r\n    return (\r\n        <div className={classes.gameBoardContainer}>\r\n            <Paper>\r\n                <table>\r\n                    <tbody>\r\n                    {cells}\r\n                    </tbody>\r\n                </table>\r\n            </Paper>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GameBoard;","import React from \"react\";\r\n\r\nimport {GameState} from \"../engine/redux/snake/models/state\";\r\n\r\nfunction DebugStateMessage({gameState}: { gameState: GameState, }) {\r\n    const debugStateAsString = isProdEnv() ? \"\" : JSON.stringify(gameState);\r\n\r\n    return (\r\n        <div>\r\n            {debugStateAsString}\r\n        </div>\r\n    );\r\n\r\n    function isProdEnv() {\r\n        return process.env.NODE_ENV === \"production\";\r\n    }\r\n}\r\n\r\nexport default DebugStateMessage;","import React, {ChangeEvent} from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport {GameConfig} from \"../engine/redux/snake/models/state\";\r\nimport {updateConfig} from \"../engine/redux/snake/game/actions\";\r\n\r\ntype FieldNumberRange = { min: number, max: number };\r\n\r\nfunction GameConfigField({config, field, id, label, range: {min, max}, dispatch}: { config: GameConfig, field: keyof GameConfig, id: string, label: string, range: FieldNumberRange, dispatch: Dispatch }) {\r\n    return (\r\n        <TextField\r\n            autoFocus\r\n            id={id}\r\n            label={label}\r\n            fullWidth\r\n            value={config[field]}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            type=\"number\"\r\n            InputProps={{inputProps: {min, max}}}\r\n            onChange={updateIfValid}\r\n        />\r\n    );\r\n\r\n    function updateIfValid(event: ChangeEvent<HTMLInputElement>) {\r\n        const newValue = parseInt(event.target.value);\r\n        if (Number.isInteger(newValue)) {\r\n            return dispatch(updateConfig({field, newValue}));\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameConfigField;","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport GameConfigField from \"./GameConfigDialog\";\r\nimport {GameState} from \"../engine/redux/snake/models/state\";\r\nimport {startGame} from \"../engine/redux/snake/game/actions\";\r\n\r\n//(updated: UpdatedConfig) => void\r\nconst BOARD_SIZE_RANGE = {min: 6, max: 25};\r\n\r\nfunction GameConfigDialog({gameState}: { gameState: GameState, }) {\r\n    const {config, meta} = gameState;\r\n    const isConfigDialogOpen = meta.isDialogOpen;\r\n    const dispatch = useDispatch();\r\n\r\n    function optionalDialog() {\r\n        if (isConfigDialogOpen) {\r\n            return (\r\n                <Dialog open={isConfigDialogOpen} aria-labelledby=\"game-config-dialog\">\r\n                    <DialogTitle id=\"game-config-dialog\">Game Configuration</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Feel free to customize your game! :)\r\n                        </DialogContentText>\r\n                        <GameConfigField\r\n                            id=\"width\"\r\n                            label=\"Width\"\r\n                            config={config}\r\n                            field=\"w\"\r\n                            range={BOARD_SIZE_RANGE}\r\n                            dispatch={dispatch}\r\n                        />\r\n                        <GameConfigField\r\n                            id=\"height\"\r\n                            label=\"height\"\r\n                            config={config}\r\n                            field=\"h\"\r\n                            range={BOARD_SIZE_RANGE}\r\n                            dispatch={dispatch}\r\n                        />\r\n                        <GameConfigField\r\n                            id=\"numBombs\"\r\n                            label=\"Number of Bombs\"\r\n                            config={config}\r\n                            field=\"numBomb\"\r\n                            range={getNumBombsRange()}\r\n                            dispatch={dispatch}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => dispatch(startGame({config}))}\r\n                                color=\"primary\">\r\n                            Start Game\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            );\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const MAX_BOMB_PERCENTAGE = 0.3;\r\n\r\n    function getNumBombsRange() {\r\n        const min = 1;\r\n        const max = Math.round(config.h * config.w * MAX_BOMB_PERCENTAGE);\r\n\r\n        return {min, max};\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {optionalDialog()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameConfigDialog;","import React from 'react';\r\nimport {useSelector,} from \"react-redux\";\r\n\r\nimport {AppState, GameState} from \"./engine/redux/snake/models/state\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport DebugStateMessage from \"./components/DebugStateMessage\";\r\nimport GameConfigDialog from \"./components/GameConfigField\";\r\n\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n    const gameState: GameState = useSelector((state: AppState) => state.game);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <GameConfigDialog gameState={gameState}/>\r\n            <GameBoard gameState={gameState}/>\r\n            <DebugStateMessage gameState={gameState}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport {rootReducer} from \"./engine/redux/snake/reducers/rootReducer\";\r\nimport {configureStore} from \"redux-starter-kit\";\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nconst store = configureStore({reducer: rootReducer,});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}